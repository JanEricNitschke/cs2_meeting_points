name: generate-plots
on:
  workflow_call:
    inputs:
      map-name:
        type: string
        required: true
      python-version:
        type: number
        required: true

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write

jobs:
  generate-plot-input:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 16
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Build
        run: cargo build --release
      - name: Retrieve map artifacts
        uses: actions/download-artifact@v4
        with:
          name: map-artifacts
      - name: Generate plot input
        run: |
          ls -l --block-size=M .
          RUSTFLAGS='-C target-cpu=native' cargo run --release -- nav-analysis ${{ inputs.map-name }} 2>&1
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ inputs.map-name }}
          path: results/*.json

  generate-plot-output:
    runs-on: ubuntu-latest
    needs: generate-plot-input
    permissions:
      contents: write
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 16
      - name: Retrieve map artifacts
        uses: actions/download-artifact@v4
        with:
          name: map-artifacts
      - name: Retrieve results
        uses: actions/download-artifact@v4
        with:
          name: results-${{ inputs.map-name }}
          path: results
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Set up Python
        run: uv python install ${{ inputs.python-version }}
      - name: Generate plots
        run: |
          ls -l --block-size=M
          ls -l --block-size=M results
          uv run -q --no-project --with tqdm --with matplotlib --with numpy --with pillow scripts/plot_spread.py ${{ inputs.map-name }}
      - uses: FedericoCarboni/setup-ffmpeg@v3.1
        id: setup-ffmpeg

      - name: Make script executable
        run: chmod +x scripts/generate_gif.sh

      - name: Generate GIF
        run: ./scripts/generate_gif.sh "${{ inputs.map-name }}"

      - name: Retrieve hash-artifacts
        uses: actions/download-artifact@v4
        with:
          name: hash-artifacts
          path: hashes

      - name: Upload gif
        uses: actions/upload-artifact@v4
        with:
          name: gif-${{ inputs.map-name }}
          path: |
            spread_gifs/

      - name: Commit regenerated files
        run: |
          git config --global user.name 'Jan-Eric Nitschke'
          git config --global user.email 'JanEricNitschke@users.noreply.github.com'
          git add spread_images/ spread_gifs/ hashes/${{ inputs.map-name }}.txt
          git commit -m "Updating map images for ${{ inputs.map-name }}"
          git add .
          # Stash any local changes to keep the working directory clean
          git stash

          for i in {1..5}; do
            # --- Apply and commit data update
            uv run -q --no-project scripts/update_webpage_data.py
            git add index.html
            git commit -am "Updating index.html for ${{ inputs.map-name }}"
            git add .
            git stash

            # --- Try to push
            if git push origin main; then
              echo "Pushed successfully!"
              break
            else
              echo "Push failed, retrying after rerunning web data update"
              git reset --hard HEAD~1  # Undo previous commit
              git pull --rebase origin main
              # Now loop and retry (rerun script, add, commit, etc.)
              sleep 5
            fi
          done
