# This workflow will build the rust interpreter of lox

name: webpage

on:
  schedule:
    - cron: "49 1 * * *" # Run at 1:49 AM UTC every day
  workflow_dispatch:

permissions:
  contents: write

env:
  PYTHON_VERSION: 3.13
  SOURCE2_VIEWER_URL: https://github.com/ValveResourceFormat/ValveResourceFormat/releases/download/11.1/cli-windows-x64.zip
  CS2_APP_ID: 730
  CARGO_TERM_COLOR: always

jobs:
  get-map-files:
    runs-on: windows-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: main/awpy
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          path: main
      - name: Checkout awpy
        uses: actions/checkout@v4
        with:
          repository: JanEricNitschke/csgo
          path: main/awpy
          ref: allow-parsing-of-clippings

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        run: |
          uv python install ${{ env.PYTHON_VERSION }}

      - name: Install awpy
        shell: bash
        run: |
          uv sync --group dev --group test
          uv tool install .

      - name: Setup SteamCMD
        uses: CyberAndrii/setup-steamcmd@v1

      - name: Check if there is a need to update.
        id: check_time
        env:
          PYTHONIOENCODING: "utf-8"
        run: |
          # Run the update script and capture its output (expected "true" or "false")
          $requiresUpdate = uv run -q --with vdf ../scripts/check_regeneration_needed.py ../scripts/last_run_time.txt
          echo "requiresUpdate=$requiresUpdate" >> $env:GITHUB_OUTPUT

      - name: Install Counter-Strike 2
        if: steps.check_time.outputs.requiresUpdate == 'true'
        run: |
          $csDir = Join-Path (Get-Location) "cs_go"
          steamcmd +force_install_dir $csDir +login anonymous +app_update ${{ env.CS2_APP_ID }} +quit

      - name: Install Source2Viewer-CLI
        if: steps.check_time.outputs.requiresUpdate == 'true'
        run: |
          Invoke-WebRequest -Uri $env:SOURCE2_VIEWER_URL -OutFile ".\cli-windows-x64.zip"
          Expand-Archive -Path .\cli-windows-x64.zip -DestinationPath . -Force

      - name: Generate map files
        if: steps.check_time.outputs.requiresUpdate == 'true'
        run: |
          .\scripts\generate-tris.ps1 -inputPath "cs_go\game\csgo\maps"
          .\scripts\generate-maps.ps1 -inputPath "cs_go\game\csgo\pak01_dir.vpk"
          .\scripts\generate-navs.ps1 -inputPath "cs_go\game\csgo\maps"          
          .\scripts\generate-spawns.ps1 -inputPath "cs_go\game\csgo\maps"

      - name: Upload map files
        if: steps.check_time.outputs.requiresUpdate == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: map-artifacts
          path: |
            nav/
            tris/
            maps/
            spawns/

      - name: Get map names
        if: steps.check_time.outputs.requiresUpdate == 'true'
        run: |
          mv awpy/maps/ .
          mv awpy/navs/ .
          mv awpy/spawns/ .
          mv awpy/tris/ .
          cargo build --release
          $mapNamesToUpdate = ./target/release/cs2_meeting_points process-maps
          echo "mapNamesToUpdate=$mapNamesToUpdate" >> $env:GITHUB_OUTPUT
        working-directory: main

      - name: Commit regenerated files
        if: steps.check_time.outputs.requiresUpdate == 'true'
        run: |
          git config --global user.name 'Jan-Eric Nitschke'
          git config --global user.email 'JanEricNitschke@users.noreply.github.com'
          git add last_run_time.txt hashes/
          git commit -am "Updating hashes and last run time"
          git push

  generate-plots:
    runs-on: windows-latest
    permissions:
      contents: write
    needs: get-map-files
    strategy:
      matrix:
        map-name: ${{ fromJSON(needs.get-map-files.outputs.mapNamesToUpdate) }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Build
        run: |
          cargo build --release
      - name: Retrieve map artifacts
        uses: actions/download-artifact@v4
        with:
          name: map-artifacts
      - name: Generate plots
        run: |
          cargo run --release -- nav-analysis ${{ matrix.map-name }}
        working-directory: main
      - name: Upload map files
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.map-name }}
          path: results
      - name: Commit regenerated files
        run: |
          git config --global user.name 'Jan-Eric Nitschke'
          git config --global user.email 'JanEricNitschke@users.noreply.github.com'
          git add results
          git commit -am "Updating map images for ${{ matrix.map-name }}"
          git push
