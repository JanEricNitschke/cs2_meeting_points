# This workflow will build the rust interpreter of lox

name: webpage

on:
  schedule:
    - cron: "49 1 * * *" # Run at 1:49 AM UTC every day
  workflow_dispatch:


env:
  PYTHON_VERSION: 3.13
  SOURCE2_VIEWER_URL: https://github.com/ValveResourceFormat/ValveResourceFormat/releases/download/11.1/cli-windows-x64.zip
  CS2_APP_ID: 730
  CARGO_TERM_COLOR: always

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write


jobs:
  get-map-files:
    runs-on: windows-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: main/awpy
    outputs:
        mapNamesToUpdate: ${{ steps.get-maps.outputs.mapNamesToUpdate }}  # Define the output
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          path: main
      - name: Checkout awpy
        uses: actions/checkout@v4
        with:
          repository: JanEricNitschke/csgo
          path: main/awpy
          ref: allow-parsing-of-clippings

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        run: |
          uv python install ${{ env.PYTHON_VERSION }}

      - name: Install awpy
        shell: bash
        run: |
          uv sync --group dev --group test
          uv tool install .

      - name: Setup SteamCMD
        uses: CyberAndrii/setup-steamcmd@v1

      - name: Check if there is a need to update.
        id: check_time
        env:
          PYTHONIOENCODING: "utf-8"
        run: |
          # Run the update script and capture its output (expected "true" or "false")
          $requiresUpdate = uv run -q --with vdf ../scripts/check_regeneration_needed.py ../scripts/last_run_time.txt
          echo "requiresUpdate=$requiresUpdate" >> $env:GITHUB_OUTPUT

      - name: Install Counter-Strike 2
        if: steps.check_time.outputs.requiresUpdate == 'true'
        run: |
          $csDir = Join-Path (Get-Location) "cs_go"
          steamcmd +force_install_dir $csDir +login anonymous +app_update ${{ env.CS2_APP_ID }} +quit

      - name: Install Source2Viewer-CLI
        if: steps.check_time.outputs.requiresUpdate == 'true'
        run: |
          Invoke-WebRequest -Uri $env:SOURCE2_VIEWER_URL -OutFile ".\cli-windows-x64.zip"
          Expand-Archive -Path .\cli-windows-x64.zip -DestinationPath . -Force

      - name: Generate Triangles
        if: steps.check_time.outputs.requiresUpdate == 'true'
        run: |
          Get-ChildItem -Force
          .\scripts\generate-tris.ps1 -inputPath "cs_go\game\csgo\maps"

      - name: Generate Map Data
        if: steps.check_time.outputs.requiresUpdate == 'true'
        run: |
          Get-ChildItem -Force
          .\scripts\generate-maps.ps1 -inputPath "cs_go\game\csgo\pak01_dir.vpk"

      - name: Generate Nav
        if: steps.check_time.outputs.requiresUpdate == 'true'
        run: |
          Get-ChildItem -Force
          .\scripts\generate-navs.ps1 -inputPath "cs_go\game\csgo\maps"

      - name: Generate Spawns
        if: steps.check_time.outputs.requiresUpdate == 'true'
        run: |
          Get-ChildItem -Force
          .\scripts\generate-spawns.ps1 -inputPath "cs_go\game\csgo\maps"

      - name: Get map names
        id: get-maps
        if: steps.check_time.outputs.requiresUpdate == 'true'
        run: |
          Get-ChildItem -Force
          mv awpy/maps/ .
          mv awpy/nav/ .
          mv awpy/spawns/ .
          mv awpy/tri/ .
          Get-ChildItem -Force
          cargo build --release
          $mapNamesToUpdate = ./target/release/cs2_meeting_points process-maps
          echo $mapNamesToUpdate
          echo "mapNamesToUpdate=$mapNamesToUpdate" >> $env:GITHUB_OUTPUT
        working-directory: main

      - name: Upload map files
        if: steps.check_time.outputs.requiresUpdate == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: map-artifacts
          path: |
            main/nav
            main/tri
            main/maps
            main/spawns

      - name: Commit regenerated files
        if: steps.check_time.outputs.requiresUpdate == 'true'
        run: |
          git config --global user.name 'Jan-Eric Nitschke'
          git config --global user.email 'JanEricNitschke@users.noreply.github.com'
          git add scripts/last_run_time.txt hashes/
          git commit -am "Updating hashes and last run time"
          git push
        working-directory: main

  generate-plots:
    runs-on: windows-latest
    permissions:
      contents: write
    needs: get-map-files
    strategy:
      matrix:
        map-name: ${{ fromJSON(needs.get-map-files.outputs.mapNamesToUpdate) }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Build
        run: |
          cargo build --release
      - name: Retrieve map artifacts
        uses: actions/download-artifact@v4
        with:
          name: map-artifacts
      - name: Generate plot input
        run: |
          Get-ChildItem -Force
          Get-ChildItem -Path "nav" -Force
          Get-ChildItem -Path "tri" -Force
          Get-ChildItem -Path "spawns" -Force
          Get-ChildItem -Path "maps" -Force
          cargo run --release -- nav-analysis ${{ matrix.map-name }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Set up Python
        run: |
          uv python install ${{ env.PYTHON_VERSION }}
      - name: Generate plots
        run: |
          uv run -q --no-project --with tqdm --with matplotlib --with numpy --with pillow scripts/plot_spread.py ${{ matrix.map-name }}
      - name: Upload map files
        uses: actions/upload-artifact@v4
        with:
          name: webpage-data
          path: |
            webpage_data/*.json
      - name: Commit regenerated files
        run: |
          git config --global user.name 'Jan-Eric Nitschke'
          git config --global user.email 'JanEricNitschke@users.noreply.github.com'
          git pull --rebase origin main
          git add spread_images spread_gifs
          git commit -am "Updating map images for ${{ matrix.map-name }}"
          git push


  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: generate-plots
    runs-on: ubuntu-latest
    # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
    # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download JSON artifacts
        uses: actions/download-artifact@v4
        with:
          name: webpage-data
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Set up Python
        run: |
          uv python install ${{ env.PYTHON_VERSION }}
      - name: Merge JSON and update index.html
        run: |
          uv run -q --no-project scripts/update_webpage_data.py

      - name: Commit regenerated files
        run: |
          git config --global user.name 'Jan-Eric Nitschke'
          git config --global user.email 'JanEricNitschke@users.noreply.github.com'
          git pull --rebase origin main
          git add index.html
          git commit -am "Updating index.html"
          git push

      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: |
            index.html
            spread_images/
            spread_gifs/
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
